// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shoppingAPI.Data.Context;

namespace shoppingAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191111040447_fixProduct")]
    partial class fixProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName");

                    b.Property<int>("CategoryId");

                    b.HasKey("BranchId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ContactName")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OrderPlace");

                    b.Property<int>("OrderTotal");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<double>("PriceEach");

                    b.Property<int>("QuantityOrdered");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<DateTime>("ShippedDate");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("CustomerId");

                    b.Property<int?>("CustomerId1");

                    b.Property<DateTime>("PaymentDay");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.DigitalPiano", b =>
                {
                    b.Property<int>("DigitalPianoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoAccompaniment");

                    b.Property<string>("BuiltInSongs");

                    b.Property<string>("DigitalEffects");

                    b.Property<string>("Dimensions");

                    b.Property<string>("IncludedAccessories");

                    b.Property<string>("Inputs");

                    b.Property<string>("Keyboard");

                    b.Property<string>("LessonFunction");

                    b.Property<string>("MIDI");

                    b.Property<int>("MaximumPolyphony");

                    b.Property<string>("Metronome");

                    b.Property<string>("OtherFunctions");

                    b.Property<string>("Outputs");

                    b.Property<string>("PowerConsumption");

                    b.Property<string>("PowerSupply");

                    b.Property<string>("Recorder");

                    b.Property<string>("Rhythms");

                    b.Property<string>("SamplingFunction");

                    b.Property<string>("SongExpansion");

                    b.Property<string>("SoundSource");

                    b.Property<string>("Speakers");

                    b.Property<int>("SpecificationId");

                    b.Property<string>("Tones");

                    b.Property<string>("TouchResponse");

                    b.HasKey("DigitalPianoId");

                    b.HasIndex("SpecificationId")
                        .IsUnique();

                    b.ToTable("DigitalPianos");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.GrandPiano", b =>
                {
                    b.Property<int>("GrandPianoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Agraffes");

                    b.Property<string>("Beams");

                    b.Property<string>("Bridges");

                    b.Property<string>("Fallboard");

                    b.Property<string>("Hammers");

                    b.Property<string>("Keys");

                    b.Property<string>("MiddlePedal");

                    b.Property<string>("PinBlock");

                    b.Property<string>("Plate");

                    b.Property<string>("Ribs");

                    b.Property<string>("SoundBoard");

                    b.Property<int>("SpecificationId");

                    b.Property<string>("Strings");

                    b.Property<string>("TuningPins");

                    b.Property<string>("Warranty");

                    b.HasKey("GrandPianoId");

                    b.HasIndex("SpecificationId")
                        .IsUnique();

                    b.ToTable("GrandPianos");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.UprightPiano", b =>
                {
                    b.Property<int>("UprightPianoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Agraffes");

                    b.Property<string>("BackPosts");

                    b.Property<string>("BlackKeySurfaces");

                    b.Property<string>("ContourBars");

                    b.Property<string>("DuplexScaling");

                    b.Property<string>("FrontCasters");

                    b.Property<string>("HammerFelts");

                    b.Property<bool>("Lock");

                    b.Property<string>("Pedal");

                    b.Property<bool>("SoftFall");

                    b.Property<string>("Soundboard");

                    b.Property<string>("SpeakingLengthOfNo1String");

                    b.Property<int>("SpecificationId");

                    b.Property<string>("WhiteKeySurfaces");

                    b.HasKey("UprightPianoId");

                    b.HasIndex("SpecificationId")
                        .IsUnique();

                    b.ToTable("UprightPianos");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<int>("BrandId");

                    b.Property<bool>("Popularity");

                    b.Property<double>("Price");

                    b.Property<string>("ProductName");

                    b.Property<int>("SpecificationId");

                    b.HasKey("ProductId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BrandId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HtmlDescription");

                    b.Property<string>("ImgUrl");

                    b.Property<int>("ProductId");

                    b.Property<string>("TextDescription");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Popularity");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantities");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("OrderDetailId");

                    b.Property<int>("ProductId");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Specification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<int>("Height");

                    b.Property<int>("Length");

                    b.Property<double>("Weight");

                    b.Property<int>("Width");

                    b.HasKey("SpecificationId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Branch", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Category", "Category")
                        .WithMany("Branches")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Customer", "Customer")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Payment", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.DigitalPiano", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Specification", "Specification")
                        .WithOne("DigitalPiano")
                        .HasForeignKey("shoppingAPI.Data.Entity.Piano.DigitalPiano", "SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.GrandPiano", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Specification", "Specification")
                        .WithOne("GrandPiano")
                        .HasForeignKey("shoppingAPI.Data.Entity.Piano.GrandPiano", "SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Piano.UprightPiano", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Specification", "Specification")
                        .WithOne("UprightPiano")
                        .HasForeignKey("shoppingAPI.Data.Entity.Piano.UprightPiano", "SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Product", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("shoppingAPI.Data.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("shoppingAPI.Data.Entity.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.ProductDescription", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Product", "Product")
                        .WithOne("ProductDescription")
                        .HasForeignKey("shoppingAPI.Data.Entity.ProductDescription", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.Quantity", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.Product", "Product")
                        .WithOne("Quantity")
                        .HasForeignKey("shoppingAPI.Data.Entity.Quantity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shoppingAPI.Data.Entity.ShoppingCartItem", b =>
                {
                    b.HasOne("shoppingAPI.Data.Entity.OrderDetail", "OrderDetail")
                        .WithMany("CartItems")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("shoppingAPI.Data.Entity.Product", "Product")
                        .WithOne("ShoppingCartItem")
                        .HasForeignKey("shoppingAPI.Data.Entity.ShoppingCartItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
